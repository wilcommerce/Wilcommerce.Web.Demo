@typeparam TItem
@typeparam TValue

<div class="form-group">
    <label for="@FieldId">@Label</label>
    <Autocomplete TItem="TItem" 
                  Data="Items"
                  TextField="@(item => DisplayValue.Compile().Invoke(item))"
                  ValueField="@(item => OptionValue.Compile().Invoke(item))"
                  MinLength="MinimumLength"
                  SelectedValue="Value"
                  SelectedValueChanged="OnValueChanged"
                  SearchChanged="RaiseSerchChanged"
                  Disabled="Disabled"
                  id="@FieldId"
                  Class="@CssClass"/>

    <ValidationMessage For="@ValueExpression" />
</div>

@code {
    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public string FieldId { get; set; }

    [Parameter]
    public string CssClass { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public int MinimumLength { get; set; } = 3;

    [Parameter]
    public TValue Value { get; set; }

    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<TValue>> ValueExpression { get; set; }

    [Parameter]
    public Expression<Func<TItem, string>> DisplayValue { get; set; }

    [Parameter]
    public Expression<Func<TItem, TValue>> OptionValue { get; set; }

    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    [Parameter]
    public string Placeholder { get; set; }

    [Parameter]
    public EventCallback<string> OnSearchChanged { get; set; }

    async Task OnValueChanged() => await ValueChanged.InvokeAsync(Value);

    async Task RaiseSerchChanged(string query)
    {
        if (query.Length >= MinimumLength)
        {
            await OnSearchChanged.InvokeAsync(query);
        }
    }
}
