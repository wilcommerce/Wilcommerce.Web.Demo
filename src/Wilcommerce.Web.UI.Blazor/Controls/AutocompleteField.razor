@typeparam TItem

<div class="form-group">
    <label for="@FieldId">@Label</label>
    <BlazoredTypeahead TItem="TItem"
                       TValue="TItem"
                       Value="Value"
                       ValueChanged="ValueChanged"
                       ValueExpression="ValueExpression"
                       SearchMethod="OnSearch"
                       MinimumLength="MinimumLength"
                       Disabled="Disabled">
        <ResultTemplate>
            @DisplayValue.Invoke(context)
        </ResultTemplate>
        <SelectedTemplate>
            @DisplayValue.Invoke(context)
        </SelectedTemplate>
    </BlazoredTypeahead>
    
    <ValidationMessage For="@ValueExpression" />
</div>

@code {
    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public string FieldId { get; set; }

    [Parameter]
    public string CssClass { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public int MinimumLength { get; set; } = 3;

    [Parameter]
    public TItem Value { get; set; }

    [Parameter]
    public EventCallback<TItem> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<TItem>> ValueExpression { get; set; }

    [Parameter]
    public Func<TItem, string> DisplayValue { get; set; }

    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    [Parameter]
    public Func<string, Task<IEnumerable<TItem>>> OnSearch { get; set; }
}
