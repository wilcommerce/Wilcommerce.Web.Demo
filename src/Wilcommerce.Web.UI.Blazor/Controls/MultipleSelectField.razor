@typeparam TItem
@typeparam TValue

<div class="form-group">
    <label for="@FieldId">@Label</label>
    <div class="input-group mb-3">
        @if (Value != null && Value.Any())
        {
            <div class="input-group-prepend">
                @foreach (var value in Value)
                {
                    <span class="input-group-text">
                        @value
                        <button type="button" class="btn btn-sm" style="padding-top:0; padding-bottom:0;" @onclick="() => RemoveValue(value)">
                            <i class="fas fa-times"></i>
                        </button>
                    </span>
                }
            </div>
        }
        <InputSelect @bind-Value="selectedValue"
                     @onchange="OnValueSelected"
                     id="@FieldId"
                     class="@CssClass"
                     disabled="@Disabled">
            @if (!string.IsNullOrWhiteSpace(EmptyText))
            {
                <option>@EmptyText</option>
            }
            @foreach (var item in Items)
            {
                <option value="@OptionValue.Invoke(item)">@DisplayValue.Invoke(item)</option>
            }
        </InputSelect>
    </div>

    <ValidationMessage For="@ValueExpression" />
</div>

@code {
    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public string FieldId { get; set; }

    [Parameter]
    public IList<TValue> Value { get; set; }

    [Parameter]
    public string CssClass { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public EventCallback<IList<TValue>> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<IList<TValue>>> ValueExpression { get; set; }

    [Parameter]
    public Func<TItem, string> DisplayValue { get; set; }

    [Parameter]
    public Func<TItem, TValue> OptionValue { get; set; }

    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    [Parameter]
    public string EmptyText { get; set; }

    TValue selectedValue;

    async Task OnValueSelected(ChangeEventArgs e) => await AddValue(selectedValue);

    async Task AddValue(TValue value)
    {
        if (!Value.Contains(value))
        {
            Value.Add(value);
            await ValueChanged.InvokeAsync(Value);
        }
    }

    async Task RemoveValue(TValue value)
    {
        if (Value.Remove(value))
        {
            await ValueChanged.InvokeAsync(Value);
        }
    }
}
